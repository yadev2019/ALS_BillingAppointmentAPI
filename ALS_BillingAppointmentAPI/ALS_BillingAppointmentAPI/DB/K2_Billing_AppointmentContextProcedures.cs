// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using ALS_BillingAppointmentAPI.DB;

namespace ALS_BillingAppointmentAPI.DB
{
    public partial class K2_Billing_AppointmentContext
    {
        private K2_Billing_AppointmentContextProcedures _procedures;

        public K2_Billing_AppointmentContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new K2_Billing_AppointmentContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public K2_Billing_AppointmentContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class K2_Billing_AppointmentContextProcedures
    {
        private readonly K2_Billing_AppointmentContext _context;

        public K2_Billing_AppointmentContextProcedures(K2_Billing_AppointmentContext context)
        {
            _context = context;
        }

        public virtual async Task<List<usp_AdhocListInvoiceByInvoiceAddressResult>> usp_AdhocListInvoiceByInvoiceAddressAsync(string INVOICE_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "INVOICE_ID",
                    Size = 100,
                    Value = INVOICE_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_AdhocListInvoiceByInvoiceAddressResult>("EXEC @returnValue = [dbo].[usp_AdhocListInvoiceByInvoiceAddress] @INVOICE_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_CriteriaSearchBillingAppointmentResult>> usp_CriteriaSearchBillingAppointmentAsync(string BA_NO, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BA_NO",
                    Size = 40,
                    Value = BA_NO ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_CriteriaSearchBillingAppointmentResult>("EXEC @returnValue = [dbo].[usp_CriteriaSearchBillingAppointment] @BA_NO", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_GetNewRunningNoResult>> usp_GetNewRunningNoAsync(string IsBilling, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IsBilling",
                    Size = 60,
                    Value = IsBilling ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_GetNewRunningNoResult>("EXEC @returnValue = [dbo].[usp_GetNewRunningNo] @IsBilling", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
